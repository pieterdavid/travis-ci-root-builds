#!/bin/bash

debug=false
tmva=true
while [[ $# > 0 ]]
do
key="$1"
case $key in
    --debug)
    debug=true
    shift
    ;;
    --no-tmva)
    tmva=false
    shift
    ;;
    *)
    echo "unknown option: ${key}"
    exit 1
    ;;
esac
shift
done

set -e

PYTHON_VERSIONS="2.7 3.4"

BUILD=/vagrant/builds
TAGS=/vagrant/tags.lst
ARCH=`uname -m`
GCC_VERSION=`gcc -dumpversion`
NPROC=`nproc`

if [ ! -e "${BUILD}" ]; then
    mkdir -p "${BUILD}"
fi

##
mkdir -p /vagrant/workdir
cd /vagrant/workdir

if [ ! -e builds ]; then
    mkdir -p builds
fi

if [ ! -e ${TAGS} ]; then
    echo "list the tags, one per line in ${TAGS}"
    exit 1
fi

if [ ! -e root-src ]; then
    git clone http://root.cern.ch/git/root.git root-src || exit 1
fi


function build-root {
    ROOT=$1
    ROOT_NICE_VERSION=${ROOT/v/}
    ROOT_NICE_VERSION=${ROOT_NICE_VERSION//-/.}
    PYTHON_MAJOR_VERSION=`python -c "from __future__ import print_function; import distutils.sysconfig; print(distutils.sysconfig.get_python_version())"`
    BUNDLE=ROOT-${ROOT_NICE_VERSION}_Python-${PYTHON_MAJOR_VERSION}_GCC-${GCC_VERSION}_${ARCH}
    
    options=""
    if [ "$tmva" = true ]; then
        options+=" --enable-tmva"
    else
        BUNDLE+="_notmva"
    fi
    if [ "$debug" = true ]; then
        options+=" --build=debug"
        BUNDLE+="_debug"
    fi
    
    if [ -e ${BUILD}/${BUNDLE}.tar.xz ]; then
        echo "${BUILD}/${BUNDLE}.tar.xz already exists"
        continue
    fi
    
    PYTHON_LIB=`python -c "from __future__ import print_function; import distutils.sysconfig; import os; print(os.path.dirname(distutils.sysconfig.get_python_lib(standard_lib=True)))"`
    export LD_LIBRARY_PATH=${PYTHON_LIB}

    echo "Python lib: ${PYTHON_LIB}"
    echo "Building $ROOT ..."

    cd root-src
    git reset --hard HEAD
    git clean -fdx || true
    git checkout $ROOT
    mkdir _build
    cd _build
    cmake .. -Dcxx11=ON -Dgminimal=ON -Dasimage=ON -Dx11=ON -Dpython=ON -Droofit=ON -Dxml=ON -Dtmva=ON -Dminuit2=ON -Dxrootd=OFF -G Ninja -DCMAKE_INSTALL_PREFIX="" || exit 1
    ninja -j3 || exit 1
    export ROOTSYS=${BUNDLE}
    DESTDIR="/vagrant/workdir/builds/${BUNDLE}" ninja install || exit 1
    cd ../../builds
    tar cJvf ${BUNDLE}.tar.xz ${BUNDLE}
    cp ${BUNDLE}.tar.xz ${BUILD}
    cd ../..
}


# build ROOTs
while read ROOT;
do
    if [[ $ROOT == \#* ]]; then
        continue
    fi
    for PYTHON in $PYTHON_VERSIONS; do
        echo "Setting up Python-${PYTHON}"
        # Create a virtualenv and work within it
        virtualenv -p /usr/bin/python${PYTHON} .env
        . .env/bin/activate
        build-root $ROOT
        # Deactivate the virtualenv
        deactivate
    done
done < ${TAGS}
